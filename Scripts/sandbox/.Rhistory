getwd()
pancakes <- antiword("Pancakes.doc")
library(antiword)
library(tidyverse)
pancakes <- antiword("Pancakes.doc")
pancakes
library(xml2)
amy <- xml2::read_xml("Pancakes.doc")
pancakes
library(antiword)
library(tidyverse)
#readtext("pancakes.doc")
pancakes <- antiword("Pancakes.doc")
#pancakes
split_cakes <- str_split(pancakes, "\r\n")[[1]]
pancakes <- antiword("Pancakes.doc")
install.packages("antiword")
### open the correct library
library(antiword)
pancakes <- antiword("Pancakes.doc")
#pancakes
split_cakes <- str_split(pancakes, "\r\n")[[1]]
length(split_cakes)
n <- length(split_cakes)
ingredient_list <- c()
method <- c()
i <- 1
for (i <= n)
print(split_cakes[i])
n <- length(split_cakes)
i <- 1
for (i in 1:n){
if (length(split_cakes[i]) >1){
print(split_cakes[i])
}
}
i <- i+1
if (length(split_cakes[i]) >1){
print(split_cakes[i])
i <- i+1
}
i <- 1
for (i in 1:n){
if (length(split_cakes[i]) >1){
print(split_cakes[i])
i <- i+1
}
}
print(split_cakes[1])
i <- 1
for (i in 1:n){
#if (length(split_cakes[i]) >1){
print(split_cakes[i])
#}
}
length(split_cakes[1])
#if (length(split_cakes[i]) >1){
print(length(split_cakes[i]))
i <- 1
for (i in 1:n){
#if (length(split_cakes[i]) >1){
print(length(split_cakes[i]))
#}
}
recipe_list <- as.list(split_cakes)
recipe_list
recipe_list[1]
recipe_list[2]
length(recipe_list[1])
length(recipe_list[2])
nchar(split_cakes[1])
nchar(split_cakes[2])
i <- 1
for (i in 1:n){
if (nchar(split_cakes[i]) >1){
print(split_cakes[i])
#}
}
i <- 1
for (i in 1:n){
if (nchar(split_cakes[i]) >1){
print(split_cakes[i])
}
}
}
str_trim(ingredient_list)
str_trim(ingredient_list[2])
ingredient_list[2]
str_trim(recipe_list[2])
recipe_list <- str_split(pancakes, "\r\n")[[1]] %>%
str_trim()
recipe_list
recipe_list <- str_split(pancakes, "\r\n")[[1]] %>%
str_trim()
recipe_list
recipe_list <- str_trim(recipe_list)
recipe_list
split_cakes[lapply(split_cakes,nchar)>0]
recipe_list <- str_split(pancakes, "\r\n")[[1]] %>%
str_trim()
recipe_list[lapply(recipe_list,nchar)>0]
recipe_list
recipe_list <- str_split(pancakes, "\r\n")[[1]] %>%
str_trim()
recipe_list <- recipe_list[lapply(recipe_list,nchar)>0]
recipe_list
recipe_name <- recipe_list[1]
if (recipe_list[2]=="Ingredients"){
recipe_subtitle <- ""
} else {
recipe_subtitle <- recipe_list[2]
}
if (recipe_list[2]=="Ingredients"){
recipe_subtitle <- ""
} else {
recipe_subtitle <- recipe_list[2]
}
print(recipe_list[i])
for (i in ingredient_index+1:method_index-1){
print(recipe_list[i])
}
###  This returns the number of WHERE Ingredients are
ingredient_index <- which(!is.na(str_locate(split_cakes,"Ingredients")[,1]))
###Next comes method
method_index <- which(!is.na(str_locate(split_cakes,"Method")[,1]))
for (i in ingredient_index+1:method_index-1){
print(recipe_list[i])
}
method_index-1
recipe_list
###  This returns the number of WHERE Ingredients are
ingredient_index <- which(!is.na(str_locate(recipe_list,"Ingredients")[,1]))
###Next comes method
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
for (i in ingredient_index+1:method_index-1){
print(recipe_list[i])
}
###Next comes method
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
method_index
recipe_list
for (i in (ingredient_index+1):(method_index-1)){
print(recipe_list[i])
}
amy <- c()
amy+ 5
append(amy, 5)
append(c(2,4), 5)
for (i in (ingredient_index+1):(method_index-1)){
ingredient_list <- append(ingredient_index, recipe_list[i]
}
for (i in (ingredient_index+1):(method_index-1)){
ingredient_list <- append(ingredient_index, recipe_list[i]
}
for (i in (ingredient_index+1):(method_index-1)){
ingredient_list <- append(ingredient_index, recipe_list[i])
}
ingredient_list
## initialize some empty lists
ingredient_list <- c()
for (i in (ingredient_index+1):(method_index-1)){
ingredient_list <- append(ingredient_list, recipe_list[i])
}
ingredient_list
variation_index <- which(!is.na(str_locate(recipe_list,"Variations")[,1]))
method <- c()
for (i in (method+1):(variation_index-1)){
method <- append(ingredient_list, recipe_list[i])
}
method <- c()
for (i in (method+1):(variation_index-1)){
method <- append(method, recipe_list[i])
}
variation_index <- which(!is.na(str_locate(recipe_list,"Variations:")[,1]))
## create a list for the method
method <- c()
for (i in (method+1):(variation_index-1)){
method <- append(method, recipe_list[i])
}
method <- c()
for (i in (method+1):(variation_index-1)){
method <- append(method, recipe_list[i])
}
variation_index <- which(!is.na(str_locate(recipe_list,"Variations:")[,1]))
variation_index
## create a list for the method
method <- c()
for (i in (method_index+1):(variation_index-1)){
method <- append(method, recipe_list[i])
}
method
read_mom_word_doc <- function(filename) {
## read in the file
pancakes <- antiword(filename)
## create a list by breaking on return keys and trimming white space at begining and end
recipe_list <- str_split(pancakes, "\r\n")[[1]] %>%
str_trim()
## cut out any line that's blank.
recipe_list <- recipe_list[lapply(recipe_list,nchar)>0]
recipe_name <- recipe_list[1]
if (recipe_list[2]=="Ingredients"){
recipe_subtitle <- ""
} else {
recipe_subtitle <- recipe_list[2]
}
## How long is my list?
n <- length(recipe_list)
###  This returns the number of WHERE teh headings are
ingredient_index <- which(!is.na(str_locate(recipe_list,"Ingredients")[,1]))
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
variation_index <- which(!is.na(str_locate(recipe_list,"Variations:")[,1]))
nutrition_index <- which(!is.na(str_locate(recipe_list,"Nutritional Information:")[,1]))
source_index <- which(!is.na(str_locate(recipe_list,"Source:")[,1]))
notes_index <- which(!is.na(str_locate(recipe_list,"Notes:")[,1]))
## TO DO
## if variation_index == NA, make it equal to n
## create a list of ingredients
ingredient_list <- c()
for (i in (ingredient_index+1):(method_index-1)){
ingredient_list <- append(ingredient_list, recipe_list[i])
}
## create a list for the method
method <- c()
for (i in (method_index+1):(variation_index-1)){
method <- append(method, recipe_list[i])
}
### do other stuff
### Save as Rdat for now, but if I really want to use Python, I should switch this to JSON
new_recipe <- c(recipe_name, recipe_subtitle, ingredient_list, method)
return(new_recipe)
}
## test:
file_name <- "Pancakes.doc"
pancake_recipe <- read_mom_word_doc("Pancakes.doc")
pancake_recipe
new_recipe <- c(recipe_name = recipe_name, b =recipe_subtitle, c=ingredient_list, d =method)
new_recipe
new_recipe[[1]]
new_recipe[[2]]
new_recipe[recipe_name]
new_recipe <- data_frame(recipe_name = recipe_name, subtitle =recipe_subtitle, ingredients=ingredient_list, method =method)
new_recipe <- list(recipe_name = recipe_name, subtitle =recipe_subtitle, ingredients=ingredient_list, method =method)
new_recipe
read_mom_word_doc <- function(filename) {
## read in the file
pancakes <- antiword(filename)
## create a list by breaking on return keys and trimming white space at begining and end
recipe_list <- str_split(pancakes, "\r\n")[[1]] %>%
str_trim()
## cut out any line that's blank.
recipe_list <- recipe_list[lapply(recipe_list,nchar)>0]
recipe_name <- recipe_list[1]
if (recipe_list[2]=="Ingredients"){
recipe_subtitle <- ""
} else {
recipe_subtitle <- recipe_list[2]
}
## How long is my list?
n <- length(recipe_list)
###  This returns the number of WHERE teh headings are
ingredient_index <- which(!is.na(str_locate(recipe_list,"Ingredients")[,1]))
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
variation_index <- which(!is.na(str_locate(recipe_list,"Variations:")[,1]))
nutrition_index <- which(!is.na(str_locate(recipe_list,"Nutritional Information:")[,1]))
source_index <- which(!is.na(str_locate(recipe_list,"Source:")[,1]))
notes_index <- which(!is.na(str_locate(recipe_list,"Notes:")[,1]))
## TO DO
## if variation_index == NA, make it equal to n
## create a list of ingredients
ingredient_list <- c()
for (i in (ingredient_index+1):(method_index-1)){
ingredient_list <- append(ingredient_list, recipe_list[i])
}
## create a list for the method
method <- c()
for (i in (method_index+1):(variation_index-1)){
method <- append(method, recipe_list[i])
}
### do other stuff
### Save as Rdat for now, but if I really want to use Python, I should switch this to JSON
new_recipe <- list(recipe_name = recipe_name, subtitle =recipe_subtitle, ingredients=ingredient_list, method =method)
return(new_recipe)
}
## test:
file_name <- "Pancakes.doc"
pancake_recipe <- read_mom_word_doc("Pancakes.doc")
pancake_recipe
