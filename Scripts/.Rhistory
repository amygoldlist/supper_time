### open the correct libraries.  Antiword opens "doc" files
library(antiword)
library(tidyverse)
### Make a function that reads in a single file.
## THEN, I can read in all the files at once!  Like a Pro!
read_mom_word_doc <- function(filename) {
## read in the file
pancakes <- antiword(filename)
## create a list by breaking on return keys and trimming white space at begining and end
recipe_list <- str_split(pancakes, "\r\n")[[1]] %>%
str_trim()
## cut out any line that's blank.
recipe_list <- recipe_list[lapply(recipe_list,nchar)>0]
recipe_name <- recipe_list[1]
if (recipe_list[2]=="Ingredients"){
recipe_subtitle <- ""
} else {
recipe_subtitle <- recipe_list[2]
}
## How long is my list?
n <- length(recipe_list)
###  This returns the number of WHERE teh headings are
ingredient_index <- which(!is.na(str_locate(recipe_list,"Ingredients")[,1]))
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
variation_index <- which(!is.na(str_locate(recipe_list,"Variations:")[,1]))
nutrition_index <- which(!is.na(str_locate(recipe_list,"Nutritional Information:")[,1]))
source_index <- which(!is.na(str_locate(recipe_list,"Source:")[,1]))
notes_index <- which(!is.na(str_locate(recipe_list,"Notes:")[,1]))
## TO DO
## if variation_index == NA, make it equal to n
## create a list of ingredients
ingredient_list <- c()
for (i in (ingredient_index+1):(method_index-1)){
ingredient_list <- append(ingredient_list, recipe_list[i])
}
## create a list for the method
method <- c()
for (i in (method_index+1):(variation_index-1)){
method <- append(method, recipe_list[i])
}
### do other stuff
### Save as Rdat for now, but if I really want to use Python, I should switch this to JSON
new_recipe <- list(recipe_name = recipe_name, subtitle =recipe_subtitle, ingredients=ingredient_list, method =method)
return(new_recipe)
}
pancake_recipe <- read_mom_word_doc("../doc/Pancakes.doc")
pancake_recipe <- read_mom_word_doc("..\doc\Pancakes.doc")
pancake_recipe <- read_mom_word_doc("../Recipes/Pancakes.doc")
pancake_recipe
library(antiword)
library(tidyverse)
method_index
recipe_list <- c(4)
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
method_index
## TO DO
method_index == 0
if (method_index == 0){
0
} else {"Wrong!!"}
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
method_index
length(method_index)
if (length(method_index) > 0){
0
} else {"Wrong!!"}
if (length(method_index) == 0){
0
} else {"Wrong!!"}
recipe_list <- c("Method")
method_index <- which(!is.na(str_locate(recipe_list,"Method")[,1]))
method_index
if (length(method_index) == 0){
0
} else {"Wrong!!"}
length(method_index)
if (length(method_index) == 0){
method_index <- 1
}
if (length(method_index) == 0){
method_index <- n+1
}
?arima.sim()
arima.sim(4,3,1)
arima.sim(c(4,3,1)
arima.sim(c(4,3,1))
arima.sim(c(4,3,1))
arima.sim(n = 63, list(ar = c(0.8897, -0.4858), ma = c(-0.2279, 0.2488)),
sd = sqrt(0.1796))
arima.sim(n = 63, list(ar = c(2, 3), ma = c(17, 4)),
sd = 30)
arima.sim(n = 63, list(ar = c(2, 3), ma = c(.17, .4)),sd = 30)
arima.sim(n = 63, list(ar = c(.2, .3), ma = c(.17, .4)),sd = 30)
arima.sim(n = 63, list(ar = c(.2, .3), ma = c(17, 4)),sd = 30)
gen <- arima.sim(n = 63, list(ar = c(.2, .3), ma = c(17, 4)),sd = 30)
plot(gen)
round(gen)
gen <- arima.sim(n = 63, list(ar = c(.2, .3), ma = c(117, 40)),sd = 30)
plot(gen)
round(gen)
9000+round(gen)
### generate an ARMA model:
gen <- arima.sim(n = 63, list(ar = c(.2, .3), ma = c(117, 40)),sd = 30)
plot(gen)
9000+round(gen)
solve(2*x^2-16*x+55)
?solve
plot(2*x^2-16*x+55)
plot(2*x^2-16*x+55,x)
